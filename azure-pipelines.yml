# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm

jobs:
  - job: TestJob
    displayName: 'Test build'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Install Node.js'

      - task: Cache@2
        inputs:
          key: 'npm | "$(Agent.OS)" | package-lock.json'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: $(npm_config_cache)
        displayName: Cache npm

      - task: Npm@1
        inputs:
          command: 'install'
        displayName: 'Install dependecies'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run test:ci'
        displayName: 'Test'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/junit.xml'
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: 'Publish test Results'

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'

  - job: BuildJob
    dependsOn: TestJob
    condition: succeeded()
    displayName: "Build and push Artifact"
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Install Node.js'

      - task: Cache@2
        inputs:
          key: 'npm | "$(Agent.OS)" | package-lock.json'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: $(npm_config_cache)
        displayName: Cache npm

      - task: Npm@1
        inputs:
          command: 'install'
        displayName: 'Install dependecies'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run build:ci'
        condition: succeeded()
        displayName: 'Build app'

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: 'build'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/build-$(Build.BuildId).zip'
          replaceExistingArchive: true
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Archive build'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/build-$(Build.BuildId).zip'
          ArtifactName: 'build'
          publishLocation: 'Container'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Publish build'